@page "/"
@page "/catalogo"

@using System.Text.Json
@inject ICategoriaService categoriaService
@inject IProductoService productoService
@inject NavigationManager _navService
@inject IToastService toastService


<div class="row justify-content-center mt-3 mb-4">
    <div class="col-sm-6 col-md-8 col-xl-9">
        <div class="input-group mb-3">
            <input type="text" class="form-control" placeholder="Buscar producto..." @bind-value="buscar">
            <button class="btn btn-outline-secondary" type="button" @onclick="(async () => await  ObtenerCatalogo())">
                <i class="oi oi-magnifying-glass"></i></button>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-3">
        <div class="card">
            <div class="card-header text-white bg-dark">
                Categorias
            </div>
            <div class="card-body">
                @if (listaCategoria != null)
                {
                    @foreach(var item in listaCategoria)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="categoria" id="@item.IdCategoria" value="@item.Nombre"
                            @onchange="RadioSeleccion"
                                checked=@(categoriaSeleccionada.Equals(item.Nombre, StringComparison.OrdinalIgnoreCase))>
                            <label class="form-check-label" for="@item.IdCategoria">
                                @item.Nombre
                            </label>
                        </div>
                    }
                } else {
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="col-sm-9">
        <div class="row gx-4 row-cols-1 row-cols-md-3 row-cols-xl-4 justify-content-start">
            @if (listaProducto != null)
            {
                foreach(var item in listaProducto)
                {
                    <div class="col mb-5">
                        <div class="card h-100">
                            <!-- Sale badge-->
                            @if(DateTime.Now < item.FechaCreacion.Value.AddDays(30)){
                                <div class="badge bg-primary text-white position-absolute" style="top: 0.5rem; right: 0.5rem">Nuevo</div>
                            }

                            <!-- Product image-->
                            <img class="card-img-top border-dark border-1" src="@item.Imagen" style="width:100%;height:250px">
                            <!-- Product details-->
                            <div class="card-body p-4">
                                <div class="text-center">
                                    <!-- Product name-->
                                    <h5 class="fw-bolder">@item.Nombre</h5>
                                    
                                    <!-- Product price-->
                                    @if(item.PrecioOferta != 0 && item.PrecioOferta < item.Precio){
                                        <span class="text-danger text-decoration-line-through">S/.@item.Precio</span>
                                        <span>S /.@item.PrecioOferta</span>
                                    } else {
                                        <span>S /.@item.Precio</span>
                                    }  
                                </div>
                            </div>
                            <!-- Product actions-->
                            <div class="card-footer p-3 pt-0 border-top-0 bg-transparent">
                                <div class="text-center"><a class="btn btn-outline-dark mt-auto" href="/detalle/@item.IdProducto">Ver producto</a></div>
                            </div>
                        </div>
                    </div>
                }
               
            } else {
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
        </div>
    </div>
</div>


@code{
    private List<CategoriaDTO>? listaCategoria = null;
    private List<ProductoDTO>? listaProducto = null;
    private string buscar = "";
    private string categoriaSeleccionada = "Todos";

    private async Task ObtenerCategorias(string Valor = "")
    {
        try 
        {
            var response = await categoriaService.Lista(Valor);
            if (response.EsCorrecto) {
                listaCategoria = (List<CategoriaDTO>)response.Resultado!;
            } else {
                listaCategoria = new List<CategoriaDTO>();
            }
        } catch(HttpRequestException httpEx) {
            listaCategoria = new List<CategoriaDTO>();
            toastService.ShowError($"Error al comunicarse con el servidor. Verifique su conexi칩n o intente m치s tarde. error:{httpEx.Message}");
            Console.WriteLine(httpEx.Message);
        } catch(JsonException jsonEx) {
            listaCategoria = new List<CategoriaDTO>();
            toastService.ShowError($"Error al procesar los datos del servidor. error: {jsonEx.Message}");
            Console.WriteLine(jsonEx.Message);
        } catch(Exception ex) {
            listaCategoria = new List<CategoriaDTO>();
            toastService.ShowError($"Ocurrio un error inesperado. error:{ex.Message}");
            Console.WriteLine(ex.Message);
        }
    }

    private async Task ObtenerCatalogo()
    {
        try 
        {
            var response = await productoService.Catalogo(categoriaSeleccionada,buscar);
            if (response.EsCorrecto) {
                listaProducto = (List<ProductoDTO>)response.Resultado!;
            } else {
                listaProducto = new List<ProductoDTO>();
            }
        } catch(HttpRequestException httpEx) {
            listaProducto = new List<ProductoDTO>();
            toastService.ShowError($"Error al comunicarse con el servidor. Verifique su conexi칩n o intente m치s tarde. error:{httpEx.Message}");
            Console.WriteLine(httpEx.Message);
        } catch(JsonException jsonEx) {
            listaProducto = new List<ProductoDTO>();
            toastService.ShowError($"Error al procesar los datos del servidor. error: {jsonEx.Message}");
            Console.WriteLine(jsonEx.Message);
        } catch(Exception ex) {
            listaProducto = new List<ProductoDTO>();
            toastService.ShowError($"Ocurrio un error inesperado. error:{ex.Message}");
            Console.WriteLine(ex.Message);
        }
    }

    private async Task RadioSeleccion(ChangeEventArgs args)
    {
        categoriaSeleccionada = args.Value.ToString();
        buscar = "";
        await ObtenerCatalogo();
    }

    protected override async Task OnInitializedAsync()
    {
        await ObtenerCategorias();
        await ObtenerCatalogo();
    }

}