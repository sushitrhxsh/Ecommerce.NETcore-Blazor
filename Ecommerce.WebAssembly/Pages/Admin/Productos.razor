@page "/productos"

@using System.Text.Json
@inject IProductoService productoService
@inject IToastService toastService
@inject SweetAlertService Swal


<div class="row justify-content-center  mt-3">
    <div class="col-sm-6 col-md-4 col-xl-3 mb-4">
        <div class="d-grid gap-1 col-12 mx-auto">
            <a class="btn btn-primary" href="/producto">Nuevo producto</a>
        </div>
    </div>
    <div class="col-sm-6 col-md-8 col-xl-9 mb-4">
        <div class="input-group mb-3">
            <input type="text" class="form-control" placeholder="Buscar producto..." @bind-value="buscar">
            <button class="btn btn-outline-secondary" type="button" @onclick="(async()=> await ObtenerProductos(buscar))">
                <i class="oi oi-magnifying-glass"></i>
             </button>
        </div>
    </div>
</div>

<div class="row gx-4 row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-xl-4 justify-content-start mt-2">

    @if (lista != null) {
        foreach(var item in lista){
            <div class="col mb-5">
                <div class="card h-100">
                    <!-- Sale badge-->
                    @if(DateTime.Now < item.FechaCreacion.Value.AddDays(30)){
                        <div class="badge bg-primary text-white position-absolute" style="top: 0.5rem; right: 0.5rem">Nuevo</div>
                    }
                   
                    
                    <!-- Product image-->
                    <img class="card-img-top border-dark border-1" src="@item.Imagen">
                    
                    <!-- Product details-->
                    <div class="card-body p-4">
                        <div class="text-center">
                            <!-- Product name-->
                            <h5 class="fw-bolder">@item.Nombre</h5>
                            
                            <!-- Product price-->
                            @if(item.PrecioOferta != 0 && item.PrecioOferta < item.Precio){
                                <span class="text-danger text-decoration-line-through">S/. @item.Precio</span>
                                <span>S /.@item.PrecioOferta</span>
                            } else {
                                <span>S /.@item.Precio</span>
                            }   
                        </div>
                    </div>

                    <!-- Product actions-->
                    <div class="card-footer bg-transparent">
                        <div class="row justify-content-between">
                            <a class="col-5 btn btn-sm btn-outline-primary mt-auto" href="/producto/@item.IdProducto"><i class="oi oi-pencil fs-5"></i></a>
                            <button class="col-5 btn btn-sm btn-outline-danger mt-auto" @onclick="(async () => await Eliminar(item))">
                                <i class="oi oi-trash fs-5"></i></button>
                        </div>
                    </div>
                </div>
            </div>
        }
    } else {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }

</div>


@code{
    private List<ProductoDTO>? lista = null;
    private string buscar = "";

    private async Task ObtenerProductos(string Valor = "")
    {
        try 
        {
            var response = await productoService.Lista(Valor);
            if (response.EsCorrecto) {
                lista = (List<ProductoDTO>)response.Resultado!;
            } else {
                lista = new List<ProductoDTO>();
            }
        } catch(HttpRequestException httpEx) {
            lista = new List<ProductoDTO>();
            toastService.ShowError($"Error al comunicarse con el servidor. Verifique su conexión o intente más tarde. error:{httpEx.Message}");
            Console.WriteLine(httpEx.Message);
        } catch(JsonException jsonEx) {
            lista = new List<ProductoDTO>();
            toastService.ShowError($"Error al procesar los datos del servidor. error: {jsonEx.Message}");
            Console.WriteLine(jsonEx.Message);
        } catch(Exception ex) {
            lista = new List<ProductoDTO>();
            toastService.ShowError($"Ocurrio un error inesperado. error:{ex.Message}");
            Console.WriteLine(ex.Message);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        await ObtenerProductos();
    }

    private async Task Eliminar(ProductoDTO modelo)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Esta seguro?",
            Text = $"Eliminar producto: {modelo.Nombre}",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Si, eliminar",
            CancelButtonText = "No, volver",
        });

        if (result.IsConfirmed) {
            var response = await productoService.Eliminar(modelo.IdProducto);
            
            if (response.EsCorrecto) {
                await ObtenerProductos();
                toastService.ShowSuccess("El producto fue eliminado");
            
            } else {
                toastService.ShowWarning(response.Mensaje);
            }
        }
    }

}